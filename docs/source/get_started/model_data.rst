=======================================
Modeling Data with MOTECH Data Services
=======================================

.. contents:: Table of Contents
   :depth: 3

################
Introduction
################

// TODO: is preferred the corrrect word?
Motech Data Services(MDS) is the preferred data layer for the Motech Platform. MDS allows defining the data model both through code
(using annotations or the exposed API) and the Schema Editor UI. MDS is capable of generic services which exuting
operations on the defined model. It also is capable of exposing a fully functional REST API for the defined data
model on the fly. Entities defined through means of code can always be extended or get their settings modified
through the MDS Schema Editor or its underlying API.

MDS uses `Datanucleus <http://www.datanucleus.org/>`_ underneath for persistence in a relational data store. Currently
MDS officially supports two RDBMS engines `MySQL <http://www.mysql.com/>`_ and `PostgreSQL <http://www.postgresql.org/>`_.
`Javassist <http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/>`_ is used for code generation and OSGi mechanics such
as bytecode weaving are used for replacing the code at runtime.

MDS generated entities bundle
###############################

All classes generated by MDS live in the mds-entities OSGi bundle, which gets generated at runtime and installed in the
directory ~/.motech/bundles. The bundle is always regenerated when changes are made to the MDS schema.
This generated bundle can also be downloaded using the following url TODO

################
MDS Entities
################

MDS defines an Entity concept. An MDS entity maps directly to a `POJO <wikipedia.org/wiki/Plain_Old_Java_Object>`_ class
and table in relational database. Entities consist of fields which are directly mapped to the object fields and columns
in the table. MDS provides a preset of supported types described TODO.

TODO: tasks link
MDS integrates itself with the task module, so a user can create a working application with a minimal number of code.
Entities generate task data providers which allow access to the data within MDS.

We can group entities into three categories:

TODO : link to sections when I figure out how to do it

EUDE - End User Defined Entities. The entities created using the UI by the end user. These classes do not exist at compile
time, but only after they are generated by MDS. Adding the `bundle generated by <TODO link to section>`_ MDS to the classpath will allow compile
time access however. EUDE entities can also be defined using the MDS API through the EntityService. Users can view and create
instances of the entities through the MDS Data browser TODO: link section.

DDE - Developer Defined Entities. Developers can use annotations to mark their `POJO <wikipedia.org/wiki/Plain_Old_Java_Object>`_ classes
as MDS Entities. These will be treated in the same way as EUDE entities, instances of the DDEs will also be acessible through
the data browser. Users can still view the schema for these entities through the Schema Editor, add fields and modify
settings(although they can't remove fields declared in the entity class).

MEDE - MDS Enhanced Developer Defined Entity. These are DDEs that were enhanced with additional fields added either
through the UI or the Entity API. This are the same as DDE, but with additional fields added at runtime. Those fields
can be accessed at compile time using `Java Reflection API <https://docs.oracle.com/javase/tutorial/reflect/>`_.

################
MDS Lookups
################

Lookups allow easily defining and executing queries on MDS entities. A lookup allows querying for a single or multiple
fields. A lookup field is always corresponding to a single field in the entity. Lookups at this moment can only use
AND logic for doing a query for multiple fields. For OR(or move complex) logic JDO queries have to be used TODO: link section.
Lookup also allow comparing fields against provided parameters using a custom operator or using a range or set of values
- defining such is not supported through the UI at the moment though.

####################################################
EUDE - End User Defined Entities
####################################################

These entities are created by end users, either through the UI or using the API. No programming knowledge is required
in order to define an EUDE. Although these entities are not known at compile time, unless the jar generated by MDS is added
to the classpath, programmatic access to these entities is still possible using
`Java Reflection API <https://docs.oracle.com/javase/tutorial/reflect/>`_ and some handy helper classes exposed by MDS.


Creating EUDE through UI
####################################################



Creating EUDE through the API
####################################################

Defining a Lookup through the UI
####################################################

Programmatic access to EUDE entities
####################################################

Adding the generated jar to the classpath
####################################################
// TODO: Make sure this works and describe how to do it
// TODO: If it doesn't work we should drop this section for now & create a bug
// TODO: Show how to do it with mvn and IntelliJ

####################################################
DDE - Developer Defined Entities
####################################################

Defining entities - the @Entity annotation
####################################################

DDE entity fields - @Field and @Ignore annotations
#####################################################

DDE inheritance
####################################################

DDE relationships
####################################################

DDE service interfaces
####################################################

Programmatic usage of DDE entities
####################################################


####################################################
MEDE - MDS Enhanced Developer Defined Entities
####################################################

Extending DDEs through the UI
####################################################


Extending DDEs through code
####################################################



####################################################
Supported field types
####################################################


####################################################
History tracking for entities
####################################################


Controlling whether to record history
####################################################


Retrieving history using code
####################################################


####################################################
MDS Trash Bin
####################################################


Using Trash using code
####################################################


####################################################
The MDS data browser
####################################################


####################################################
Data browsing settings
####################################################


Changing the settings through the UI
####################################################

Changing the settings through annotations
####################################################

####################################################
The REST API
####################################################


REST endpoints
####################################################

REST fields exposed
####################################################

Changing REST settings through the UI
####################################################

Changing REST settings through annotations
####################################################


####################################################
Entity validations
####################################################

Configuring validations through the UI
####################################################

Configuring validations using annotations
####################################################

####################################################
MDS Lookup Service
####################################################


####################################################
Executing custom queries
####################################################

####################################################
Security
####################################################


################
Javadoc
################

:doc:`/org/motechproject/mds/service/package-index`

:doc:`/org/motechproject/mds/annotations/package-index`

:doc:`/org/motechproject/mds/builder/package-index`

:doc:`/org/motechproject/mds/config/package-index`

:doc:`/org/motechproject/mds/domain/package-index`

:doc:`/org/motechproject/mds/dto/package-index`

:doc:`/org/motechproject/mds/enhancer/package-index`

:doc:`/org/motechproject/mds/ex/package-index`

:doc:`/org/motechproject/mds/filter/package-index`

:doc:`/org/motechproject/mds/jdo/package-index`

:doc:`/org/motechproject/mds/repository/package-index`

:doc:`/org/motechproject/mds/util/package-index`

:doc:`/org/motechproject/mds/web/package-index`
